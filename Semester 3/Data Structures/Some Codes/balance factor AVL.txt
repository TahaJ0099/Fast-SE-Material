class node{
    int d,h;
    node l,r;
    node() {
        h=1;
    }
}
class bst_balance{
    public node insert(node root,int d){
        if(root==null){
            node nno=new node();
            nno.d=d;
            root=nno;
            return root; }
        else if(root.d>d){
            root.l=insert(root.l,d); }
        else{
            root.r=insert(root.r,d); }
        return root;
    }
    public void inorder(node root){
        if(root==null){
            return; }
        inorder(root.l);
        System.out.print(root.d+" ");
        inorder(root.r);
    }
    public int height(node root){
        if(root==null){
            return 0; }
        int lh=height(root.l);
        int rh=height(root.r);
        return 1+Max(lh,rh);
    }
    public int balance(node root){
        if (root==null){
            return 0; }
        return height(root.l)-height(root.r);
    }
    public int Max(int x, int y){
        if(x>y){
            return x; }
        else{
            return y; }
    }
    public boolean c_balance(node root){
        int bal=balance(root);
        if(bal<=1&&bal>=-1){
            return true; }
        return false;
    }
}
public class Main{
    public static void main(String[] args) {
        bst_balance a=new bst_balance();
        node root=null;
        root=a.insert(root,10);
        a.insert(root,20);
        a.insert(root,30);
        a.insert(root,40);
        a.insert(root,50);
        a.insert(root,45);
        a.inorder(root);
        System.out.println();
        if(a.c_balance(root)==true){
            System.out.println("Tree is Balance"); }
        else{
            System.out.println("Tree is Unbalance"); }
    } }
